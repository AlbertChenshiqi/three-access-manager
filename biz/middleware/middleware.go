// Code generated by hertz generator.

package middleware

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"third-login/biz/model/api/http/auth"
	"time"
)

// LoggerMiddleware 日志中间件
func LoggerMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		start := time.Now()
		path := string(c.Path())
		method := string(c.Method())
		clientIP := c.ClientIP()

		// 在上下文中添加时间戳
		ctx = context.WithValue(ctx, "timestamp", start.Unix())
		c.Set("start_time", start)

		// 继续处理请求
		c.Next(ctx)

		// 计算处理时间
		latency := time.Since(start)
		status := c.Response.StatusCode()

		// 记录日志
		hlog.Infof("[%s] %s %s %d %v %s",
			method,
			path,
			clientIP,
			status,
			latency,
			string(c.UserAgent()),
		)
	}
}

// CORSMiddleware CORS中间件
func CORSMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		// 设置CORS头
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With")
		c.Header("Access-Control-Expose-Headers", "Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers")
		c.Header("Access-Control-Allow-Credentials", "true")

		// 处理预检请求
		if string(c.Method()) == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next(ctx)
	}
}

// RecoveryMiddleware 错误恢复中间件
func RecoveryMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		defer func() {
			if err := recover(); err != nil {
				// 记录panic错误
				hlog.Errorf("Panic recovered: %v", err)

				// 返回500错误
				c.JSON(500, auth.CommonResponse{
					Code:    500,
					Message: "Internal server error",
				})
				c.Abort()
			}
		}()

		c.Next(ctx)
	}
}

// RequestIDMiddleware 请求ID中间件
func RequestIDMiddleware() app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		// 生成请求ID
		requestID := fmt.Sprintf("%d-%s", time.Now().UnixNano(), c.ClientIP())
		c.Header("X-Request-ID", requestID)
		c.Set("request_id", requestID)

		c.Next(ctx)
	}
}
